{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAI1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,YAAa,gBACbC,MAAQV,EACRW,SArBc,SAAER,GACxBF,EAAeE,EAAES,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCADO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OAFMc,QAAQC,IAAIN,EAAGC,EAAMV,GAGvB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAKA,EAAL,WCJLS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEtB,ECFwB,SAAEA,GAG1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WACP1B,EAASC,GACJ0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAACtB,IAEGuB,EDjB0BK,CAAc5B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDlB,EAArD,OAEEsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEfzBkB,EAAe,WAMxB,MAAoC5C,mBAAS,CAAC,qBAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KASA,OACI,qCACI,oBAAIkC,UAAU,sBAAd,4CAEA,cAAC,EAAD,CAAalC,cAAeA,IAC5B,uBAEA,6BAGQ8C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCzBjC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.745840cc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    // const [inputValue, setInputValue] = useState();// si en useState no le pasamos nada, es undefined!\r\n\r\n    const [inputValue, setInputValue] = useState(''); // ''\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //Validacion\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats, ] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                placeholder={'Search gif...'}\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    //Ser categories es lo que pasamos en export const AddCategory = ({setCategories})\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=w6KmcEeHPFbokJszfOrxxssvqOrJww5x`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    //recorremos los datos y solo cogemos aquellos que necesitamos, en este caso la id, title y url\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n}","      import React from 'react'\r\n\r\n      export const GifGridItem = ({id,title,url}) => {\r\n                console.log(id,title,url)\r\n\r\n          return (\r\n              <div className=\"card animate__animated animate__bounce\">\r\n                  <img src={url} alt={title}/>\r\n                  <p> {title} </p>\r\n              </div>\r\n          )\r\n      }","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    //el state es toda la informacion que está dentro del useState, en este caso el data y loading\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport {AddCategory} from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    // const categories = ['Peaky Bleander', 'Juego de tronos', 'The Walking Dead'];  -> Esto es por si nunca va a cambiar\r\n    // const [categories, setCategories] = useState(['Peaky Bleander', 'Juego de tronos', 'The Walking Dead']);\r\n\r\n    const [categories, setCategories] = useState(['Memes developers']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( [...categories, ' Vikingos'] );\r\n    //\r\n    //     //cats es el valor del estado anterior (o sea todas las categorías)\r\n    //     setCategories( cats => [...cats, ' Vikingos'] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__rubberBand\">Search GIFs - Get the best GIF</h2>\r\n            {/*//Le mando la referencia de setcategories*/}\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {/*//El key no puede ser el índice y debe de ser único*/}\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}